async function simpanTransaksi() {
  // Kumpulkan data formulir
  const studentId = document.getElementById('studentId').value;
  const studentName = document.getElementById('studentName').value;
  let amount = document.getElementById('amount').value;

  // Bersihkan nilai amount (hapus titik pemisah ribuan)
  amount = amount.replace(/\./g, '');

  // Kumpulkan semua jenis pembayaran
  const paymentDetails = Array.from(document.querySelectorAll('.payment-type-item')).map(item => ({
      type: item.querySelector('select').value,
      amount: item.querySelector('input').value.replace(/\./g, '') // Hapus titik pemisah ribuan
  }));

  // Validasi: Pastikan semua input terisi
  if (!studentId || !studentName || !amount || paymentDetails.some(detail => !detail.type || !detail.amount)) {
      alert('Harap lengkapi semua data!');
      return;
  }

  // Data yang akan dikirim ke server
  const data = {
      studentId,
      studentName,
      amount: parseInt(amount), // Konversi ke integer
      paymentDetails
  };

  try {
      // Kirim data ke server
      const response = await fetch(
          'https://script.google.com/macros/s/AKfycbz4Unnmz0lqoDQYO34so4diAo97V0irlhoYSgfDbr2QFwc4gb0XzCRJJ62gsFyy1i89/exec',
          {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
          }
      );

      // Periksa respons server
      if (response.ok) {
          alert('Data tersimpan!');
          document.getElementById('transactionForm').reset();
          document.getElementById('paymentTypesContainer').innerHTML = ''; // Kosongkan daftar pembayaran
      } else {
          throw new Error('Gagal menyimpan data');
      }
  } catch (error) {
      alert('Error: Cek console');
      console.error(error);
  }
}
let studentCounter = 1; // Untuk melacak jumlah siswa

document.getElementById('addStudentBtn').addEventListener('click', function () {
    studentCounter++;
    const container = document.getElementById('studentListContainer');
    const newStudent = document.createElement('div');
    newStudent.className = 'student-item';
    newStudent.innerHTML = `
        <h3 class="student-item-title"><i class="fas fa-user-graduate"></i> Siswa ${studentCounter}</h3>
        <div class="transaction-form-group">
            <label for="studentName_${studentCounter}" class="transaction-form-label">
                <i class="fas fa-user-graduate"></i> Nama Siswa
            </label>
            <input type="text" id="studentName_${studentCounter}" class="transaction-form-input student-name" list="studentList" required maxlength="50" placeholder="Nama Siswa">
        </div>
        <div class="transaction-form-group">
            <label for="studentId_${studentCounter}" class="transaction-form-label">
                <i class="fas fa-id-card"></i> ID Siswa
            </label>
            <input type="text" id="studentId_${studentCounter}" class="transaction-form-input student-id" readonly placeholder="ID Siswa">
        </div>
        <div class="transaction-form-group">
            <label for="paymentTypesContainer_${studentCounter}" class="transaction-form-label">
                <i class="fas fa-receipt"></i> Jenis Pembayaran
            </label>
            <div class="payment-types-container" id="paymentTypesContainer_${studentCounter}">
                <!-- Jenis pembayaran akan ditambahkan dinamis -->
            </div>
            <button type="button" class="add-payment-btn add-payment-type" data-student="${studentCounter}">
                <i class="fas fa-plus"></i> Tambah Jenis Pembayaran
            </button>
        </div>
        <button type="button" class="remove-student-btn" onclick="this.parentElement.remove()">
            <i class="fas fa-times"></i> Hapus Siswa
        </button>
    `;
    container.appendChild(newStudent);

    // Tambahkan event listener untuk autocomplete nama siswa
    setupStudentAutocomplete();
});
// Fungsi untuk mengatur autocomplete nama siswa
function setupStudentAutocomplete() {
  document.querySelectorAll('.student-name').forEach(input => {
      input.addEventListener('input', function () {
          const selectedOption = Array.from(studentList.options).find(option => option.value === this.value);
          if (selectedOption) {
              const studentIdInput = this.closest('.student-item').querySelector('.student-id');
              studentIdInput.value = selectedOption.getAttribute('data-id');
          }
      });
  });
}

// Panggil fungsi saat halaman dimuat
document.addEventListener('DOMContentLoaded', function () {
  setupStudentAutocomplete();
});

ini js yg terpisah


<script>
        // Data dummy untuk daftar siswa
        const studentData = [
            { id: "SIS-001", name: "Ahmad", parentId: "PARENT-001" },
            { id: "SIS-002", name: "Budi", parentId: "PARENT-001" },
            { id: "SIS-003", name: "Citra", parentId: "PARENT-002" }
        ];

        // Inisialisasi daftar nama siswa
        const studentList = document.getElementById('studentList');
        studentData.forEach(student => {
            const option = document.createElement('option');
            option.value = student.name;
            option.setAttribute('data-id', student.id);
            studentList.appendChild(option);
        });

        // Isi ID Siswa otomatis saat nama dipilih
        document.getElementById('studentInfo').addEventListener('input', function () {
            const selectedOption = Array.from(studentList.options).find(option => option.value === this.value);
            if (selectedOption) {
                document.getElementById('studentId').value = selectedOption.getAttribute('data-id');
            } else {
                document.getElementById('studentId').value = ''; // Kosongkan jika tidak ada nama yang cocok
            }
        });

        // Fungsi Umum untuk Memformat Angka
        function formatCurrency(input) {
            let value = input.value.replace(/[^\d]/g, ''); // Hapus semua karakter non-angka
            value = parseInt(value) || 0; // Pastikan nilai minimal adalah 0
            input.value = new Intl.NumberFormat('id-ID').format(value); // Format angka dengan pemisah ribuan
        }

        // Fungsi untuk menghitung total
        function calculateTotal() {
            const paymentInputs = document.querySelectorAll('.dynamic-amount');
            let total = 0;
            paymentInputs.forEach(input => {
                const value = parseInt(input.value.replace(/\./g, '')) || 0; // Bersihkan titik pemisah ribuan
                total += value;
            });
            // Format total sebagai angka dengan pemisah ribuan
            document.getElementById('totalAmount').value = new Intl.NumberFormat('id-ID').format(total);
        }

        // Event listener untuk menghitung total saat input pembayaran berubah
        document.addEventListener('input', function (e) {
            if (e.target.classList.contains('dynamic-amount')) {
                formatCurrency(e.target); // Format angka
                calculateTotal(); // Hitung total
            }
        });

        // Tambah Jenis Pembayaran
        document.getElementById('addPaymentType').addEventListener('click', function () {
            const container = document.getElementById('paymentTypesContainer');
            const newItem = document.createElement('div');
            newItem.className = 'payment-type-item';
            newItem.innerHTML = `
                <select name="paymentType" required>
                    <option value="">Pilih jenis...</option>
                    <option value="SPP">SPP</option>
                    <option value="Uang Bangunan">Uang Bangunan</option>
                </select>
                <input type="text" class="transaction-form-input amount-input dynamic-amount" required 
                       placeholder="Jumlah (Rp)" inputmode="numeric">
                <button type="button" class="remove-payment-btn" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            container.appendChild(newItem);

            // Hitung ulang total setelah menambahkan item baru
            calculateTotal();
        });

        // Kirim Data ke Google Spreadsheet
        document.getElementById('transactionForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            // Isi tanggal bukti pembayaran secara otomatis
            const proofDateInput = document.getElementById('proofDate');
            const currentDate = new Date();
            const formattedProofDate = currentDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD
            proofDateInput.value = formattedProofDate;

            // Kumpulkan data formulir
            const paymentDetails = Array.from(document.querySelectorAll('.payment-type-item')).map(item => {
                const amountInput = item.querySelector('.dynamic-amount');
                return {
                    type: item.querySelector('select').value,
                    amount: amountInput.value.replace(/\./g, '') // Bersihkan titik pemisah ribuan
                };
            });

            // Validasi: Pastikan semua input terisi
            if (!document.getElementById('paymentDate').value ||
                !document.getElementById('transactionDate').value ||
                !document.getElementById('studentId').value ||
                !document.getElementById('studentInfo').value ||
                paymentDetails.some(detail => !detail.type || !detail.amount)) {
                alert('Harap lengkapi semua data!');
                return;
            }

            const data = {
                paymentDate: document.getElementById('paymentDate').value,
                transactionDate: document.getElementById('transactionDate').value,
                proofDate: proofDateInput.value,
                studentId: document.getElementById('studentId').value,
                studentName: document.getElementById('studentInfo').value,
                totalAmount: document.getElementById('totalAmount').value.replace(/\./g, ''), // Bersihkan titik pemisah ribuan
                paymentDetails: paymentDetails
            };

            try {
                const response = await fetch(
                    'https://script.google.com/macros/s/AKfycbz4Unnmz0lqoDQYO34so4diAo97V0irlhoYSgfDbr2QFwc4gb0XzCRJJ62gsFyy1i89/exec',
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    }
                );

                if (response.ok) {
                    alert('Transaksi berhasil disimpan!');
                    document.getElementById('transactionForm').reset();
                    document.getElementById('paymentTypesContainer').innerHTML = ''; // Kosongkan daftar pembayaran
                    document.getElementById('totalAmount').value = '0'; // Reset total
                } else {
                    throw new Error('Gagal menyimpan transaksi');
                }
            } catch (error) {
                alert('Error: ' + error.message);
                console.error(error);
            }
        });

        // Isi tanggal default hari ini
        document.getElementById('transactionDate').valueAsDate = new Date();
    </script>

ini js yg di html.

Gabung keduanya dan pastikan scriptnya bekerja
